services:
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: app
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
    ports: ["5432:5432"]
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d app"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7
    ports: ["6379:6379"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    ports: ["9000:9000", "9001:9001"]
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  api:
    build:
      context: ../services/api
    environment:
      DATABASE_URL: postgresql+psycopg://app:app@db:5432/app
      REDIS_URL: redis://redis:6379/0
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minio
      S3_SECRET_KEY: minio123
      S3_BUCKET: artifacts
      UVICORN_HOST: 0.0.0.0
      UVICORN_PORT: 8000
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    ports: ["8000:8000"]
    command: bash -lc "alembic upgrade head && uvicorn main:app --host 0.0.0.0 --port 8000 --reload"
    restart: unless-stopped

  worker:
    build:
      context: ../services/worker
    environment:
      DATABASE_URL: postgresql+psycopg://app:app@db:5432/app
      REDIS_URL: redis://redis:6379/0
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minio
      S3_SECRET_KEY: minio123
      S3_BUCKET: artifacts
    depends_on:
      api:
        condition: service_started
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    # This lets the worker start your bot containers (important!)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped

  scheduler:
    build:
      context: ../services/scheduler
    environment:
      DATABASE_URL: postgresql+psycopg://app:app@db:5432/app
      REDIS_URL: redis://redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  beat:
    build: ../services/worker
    command: celery -A celery_app beat -l info
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      DATABASE_URL: postgresql+psycopg://app:app@db:5432/app
      REDIS_URL: redis://redis:6379/0
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minio
      S3_SECRET_KEY: minio123
      S3_BUCKET: artifacts
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    restart: unless-stopped

  # Comment this service out if you haven't added apps/web yet
  # web:
  #   build:
  #     context: ../apps/web
  #   environment:
  #     NEXT_PUBLIC_API_URL: http://localhost:8000
  #   ports: ["3000:3000"]
  #   command: bash -lc "npm install && npm run dev"
  #   depends_on:
  #     api:
  #       condition: service_started
  #   restart: unless-stopped

volumes:
  db_data:
  minio_data:
